# Author: Jingze Dai
# Date: 16/02/2021
# Email Address: daij24@mcmaster.ca or david1147062956@163.com
import unittest
import Graph2


class MyTestCase(unittest.TestCase):
    def test_add_Node(self):
        """! Test graph2 programs' adding node methods"""
        IG1 = Graph2.Improved_Graph()
        IG1.add_Node("A")
        IG1.add_Node("B")
        IG1.add_Node("C")
        IG1.add_Node("D")
        IG1.add_Edge(["A", "C"])
        IG1.add_Edge(["B", "C"])
        IG1.add_Edge(["C", "D"])
        self.assertEqual(IG1.get_Node(), ["A", "B", "C", "D"])

        IG2 = Graph2.Improved_Graph()
        IG2.add_Node("A")
        IG2.add_Node("B")
        IG2.add_Node("C")
        IG2.add_Node("D")
        IG2.add_Node("E")
        IG2.add_Edge(["A", "B"])
        IG2.add_Edge(["A", "D"])
        IG2.add_Edge(["D", "C"])
        IG2.add_Edge(["D", "E"])
        IG2.add_Edge(["C", "E"])
        self.assertEqual(IG2.get_Node(), ["A", "B", "C", "D", "E"])

        IG3 = Graph2.Improved_Graph()
        IG3.add_Node("A")
        IG3.add_Node("B")
        IG3.add_Node("C")
        IG3.add_Node("D")
        IG3.add_Node("E")
        IG3.add_Edge(["A", "B"])
        IG3.add_Edge(["B", "C"])
        IG3.add_Edge(["C", "D"])
        IG3.add_Edge(["D", "E"])
        self.assertEqual(IG3.get_Node(), ["A", "B", "C", "D", "E"])

        IG4 = Graph2.Improved_Graph()
        IG4.add_Node(0)
        IG4.add_Node(1)
        IG4.add_Node(2)
        IG4.add_Node(3)
        IG4.add_Node(4)
        IG4.add_Edge([0, 2])
        IG4.add_Edge([1, 2])
        IG4.add_Edge([2, 4])
        IG4.add_Edge([3, 4])
        self.assertEqual(IG4.get_Node(), [0, 1, 2, 3, 4])

        IG5 = Graph2.Improved_Graph()
        IG5.add_Node(0)
        IG5.add_Node(1)
        IG5.add_Node(2)
        IG5.add_Node(3)
        IG5.add_Node(4)
        IG5.add_Edge([2, 0])
        IG5.add_Edge([2, 1])
        IG5.add_Edge([0, 1])
        IG5.add_Edge([1, 3])
        IG5.add_Edge([1, 4])
        IG5.add_Edge([4, 3])
        self.assertEqual(IG5.get_Node(), [0, 1, 2, 3, 4])

    def test_add_Edge(self):
        """! Test graph2 programs' adding edge methods"""
        IG6 = Graph2.Improved_Graph()
        IG6.add_Node(0)
        IG6.add_Node(1)
        IG6.add_Node(2)
        IG6.add_Node(3)
        IG6.add_Node(4)
        IG6.add_Edge([0, 1])
        IG6.add_Edge([1, 2])
        IG6.add_Edge([2, 3])
        IG6.add_Edge([3, 4])
        IG6.add_Edge([4, 0])
        self.assertEqual(IG6.get_Edge()[0], [1, 4])
        self.assertEqual(IG6.get_Edge()[1], [0, 2])
        self.assertEqual(IG6.get_Edge()[2], [1, 3])
        self.assertEqual(IG6.get_Edge()[3], [2, 4])
        self.assertEqual(IG6.get_Edge()[4], [3, 0])

        IG7 = Graph2.Improved_Graph()
        IG7.add_Node(0)
        IG7.add_Node(1)
        IG7.add_Node(2)
        IG7.add_Node(3)
        IG7.add_Node(4)
        IG7.add_Edge([0, 1])
        IG7.add_Edge([0, 2])
        IG7.add_Edge([2, 3])
        IG7.add_Edge([3, 4])
        IG7.add_Edge([1, 4])
        self.assertEqual(IG7.get_Edge()[0], [1, 2])
        self.assertEqual(IG7.get_Edge()[1], [0, 4])
        self.assertEqual(IG7.get_Edge()[2], [0, 3])
        self.assertEqual(IG7.get_Edge()[3], [2, 4])
        self.assertEqual(IG7.get_Edge()[4], [3, 1])

        IG8 = Graph2.Improved_Graph()
        IG8.add_Node(0)
        IG8.add_Node(1)
        IG8.add_Node(2)
        IG8.add_Edge([0, 1])
        IG8.add_Edge([1, 2])
        IG8.add_Edge([2, 0])
        self.assertEqual(IG8.get_Edge()[0], [1, 2])
        self.assertEqual(IG8.get_Edge()[1], [0, 2])
        self.assertEqual(IG8.get_Edge()[2], [1, 0])

        IG9 = Graph2.Improved_Graph()
        IG9.add_Node(0)
        IG9.add_Node(1)
        IG9.add_Node(2)
        IG9.add_Node(3)
        IG9.add_Node(4)
        IG9.add_Node(5)
        IG9.add_Edge([0, 1])
        IG9.add_Edge([0, 2])
        IG9.add_Edge([2, 3])
        IG9.add_Edge([2, 4])
        IG9.add_Edge([4, 5])
        self.assertEqual(IG9.get_Edge()[0], [1, 2])
        self.assertEqual(IG9.get_Edge()[1], [0])
        self.assertEqual(IG9.get_Edge()[2], [0, 3, 4])
        self.assertEqual(IG9.get_Edge()[3], [2])
        self.assertEqual(IG9.get_Edge()[4], [2, 5])
        self.assertEqual(IG9.get_Edge()[5], [4])

        IG10 = Graph2.Improved_Graph()
        IG10.add_Node(0)
        IG10.add_Node(1)
        IG10.add_Node(2)
        IG10.add_Node(3)
        IG10.add_Node(4)
        IG10.add_Edge([0, 1])
        IG10.add_Edge([1, 4])
        IG10.add_Edge([0, 4])
        IG10.add_Edge([0, 2])
        IG10.add_Edge([0, 3])
        IG10.add_Edge([2, 3])
        IG10.add_Edge([3, 4])
        self.assertEqual(IG10.get_Edge()[0], [1, 4, 2, 3])
        self.assertEqual(IG10.get_Edge()[1], [0, 4])
        self.assertEqual(IG10.get_Edge()[2], [0, 3])
        self.assertEqual(IG10.get_Edge()[3], [0, 2, 4])
        self.assertEqual(IG10.get_Edge()[4], [1, 0, 3])

    def test_get_Sublist(self):
        """! Test graph2 programs' getting-sublist methods"""
        IG1 = Graph2.Improved_Graph()
        IG1.add_Node("A")
        IG1.add_Node("B")
        IG1.add_Node("C")
        IG1.add_Node("D")
        IG1.add_Edge(["A", "C"])
        IG1.add_Edge(["B", "C"])
        IG1.add_Edge(["C", "D"])
        self.assertEqual(IG1.get_Sublist()[0], ["A"])
        self.assertEqual(IG1.get_Sublist()[1], ["B"])
        self.assertEqual(IG1.get_Sublist()[2], ["C"])
        self.assertEqual(IG1.get_Sublist()[3], ["D"])

        IG2 = Graph2.Improved_Graph()
        IG2.add_Node("A")
        IG2.add_Node("B")
        IG2.add_Node("C")
        IG2.add_Node("D")
        IG2.add_Node("E")
        IG2.add_Edge(["A", "B"])
        IG2.add_Edge(["A", "D"])
        IG2.add_Edge(["D", "C"])
        IG2.add_Edge(["D", "E"])
        IG2.add_Edge(["C", "E"])
        self.assertEqual(IG2.get_Sublist()[0], ["A"])
        self.assertEqual(IG2.get_Sublist()[1], ["B"])
        self.assertEqual(IG2.get_Sublist()[2], ["C"])
        self.assertEqual(IG2.get_Sublist()[3], ["D"])
        self.assertEqual(IG2.get_Sublist()[4], ["E"])

        IG3 = Graph2.Improved_Graph()
        IG3.add_Node("A")
        IG3.add_Node("B")
        IG3.add_Node("C")
        IG3.add_Node("D")
        IG3.add_Node("E")
        IG3.add_Edge(["A", "B"])
        IG3.add_Edge(["B", "C"])
        IG3.add_Edge(["C", "D"])
        IG3.add_Edge(["D", "E"])
        self.assertEqual(IG3.get_Sublist()[0], ["A"])
        self.assertEqual(IG3.get_Sublist()[1], ["B"])
        self.assertEqual(IG3.get_Sublist()[2], ["C"])
        self.assertEqual(IG3.get_Sublist()[3], ["D"])
        self.assertEqual(IG3.get_Sublist()[4], ["E"])

        IG4 = Graph2.Improved_Graph()
        IG4.add_Node(0)
        IG4.add_Node(1)
        IG4.add_Node(2)
        IG4.add_Node(3)
        IG4.add_Node(4)
        IG4.add_Edge([0, 2])
        IG4.add_Edge([1, 2])
        IG4.add_Edge([2, 4])
        IG4.add_Edge([3, 4])
        self.assertEqual(IG4.get_Sublist()[0], [0])
        self.assertEqual(IG4.get_Sublist()[1], [1])
        self.assertEqual(IG4.get_Sublist()[2], [2])
        self.assertEqual(IG4.get_Sublist()[3], [3])
        self.assertEqual(IG4.get_Sublist()[4], [4])

        IG5 = Graph2.Improved_Graph()
        IG5.add_Node(0)
        IG5.add_Node(1)
        IG5.add_Node(2)
        IG5.add_Node(3)
        IG5.add_Node(4)
        IG5.add_Edge([2, 0])
        IG5.add_Edge([2, 1])
        IG5.add_Edge([0, 1])
        IG5.add_Edge([1, 3])
        IG5.add_Edge([1, 4])
        IG5.add_Edge([4, 3])
        self.assertEqual(IG5.get_Sublist()[0], [0])
        self.assertEqual(IG5.get_Sublist()[1], [1])
        self.assertEqual(IG5.get_Sublist()[2], [2])
        self.assertEqual(IG5.get_Sublist()[3], [3])
        self.assertEqual(IG5.get_Sublist()[4], [4])

    def test_get_Vertex_Cover(self):
        """! Test graph2 programs' getting-vertex-cover methods"""
        IG6 = Graph2.Improved_Graph()
        IG6.add_Node(0)
        IG6.add_Node(1)
        IG6.add_Node(2)
        IG6.add_Node(3)
        IG6.add_Node(4)
        IG6.add_Edge([0, 1])
        IG6.add_Edge([1, 2])
        IG6.add_Edge([2, 3])
        IG6.add_Edge([3, 4])
        IG6.add_Edge([4, 0])
        self.assertEqual(IG6.get_Vertex_Cover()[0], [0, 1, 2])
        self.assertEqual(IG6.get_Vertex_Cover()[1], [0, 1, 4])
        self.assertEqual(IG6.get_Vertex_Cover()[2], [0, 3, 4])
        self.assertEqual(IG6.get_Vertex_Cover()[3], [1, 2, 3])

        IG7 = Graph2.Improved_Graph()
        IG7.add_Node(0)
        IG7.add_Node(1)
        IG7.add_Node(2)
        IG7.add_Node(3)
        IG7.add_Node(4)
        IG7.add_Edge([0, 1])
        IG7.add_Edge([0, 2])
        IG7.add_Edge([2, 3])
        IG7.add_Edge([3, 4])
        IG7.add_Edge([1, 4])
        self.assertEqual(IG7.get_Vertex_Cover()[0], [0, 1, 2])
        self.assertEqual(IG7.get_Vertex_Cover()[1], [0, 1, 4])
        self.assertEqual(IG7.get_Vertex_Cover()[2], [0, 2, 3])
        self.assertEqual(IG7.get_Vertex_Cover()[3], [1, 3, 4])
        self.assertEqual(IG7.get_Vertex_Cover()[4], [2, 3, 4])

        IG8 = Graph2.Improved_Graph()
        IG8.add_Node(0)
        IG8.add_Node(1)
        IG8.add_Node(2)
        IG8.add_Edge([0, 1])
        IG8.add_Edge([1, 2])
        IG8.add_Edge([2, 0])
        self.assertEqual(IG8.get_Vertex_Cover()[0], [0, 1])
        self.assertEqual(IG8.get_Vertex_Cover()[1], [0, 2])
        self.assertEqual(IG8.get_Vertex_Cover()[2], [1, 2])

        IG9 = Graph2.Improved_Graph()
        IG9.add_Node(0)
        IG9.add_Node(1)
        IG9.add_Node(2)
        IG9.add_Node(3)
        IG9.add_Node(4)
        IG9.add_Node(5)
        IG9.add_Edge([0, 1])
        IG9.add_Edge([0, 2])
        IG9.add_Edge([2, 3])
        IG9.add_Edge([2, 4])
        IG9.add_Edge([4, 5])
        self.assertEqual(IG9.get_Vertex_Cover()[1], [0, 1, 2, 4])
        self.assertEqual(IG9.get_Vertex_Cover()[2], [0, 2, 3, 4])
        self.assertEqual(IG9.get_Vertex_Cover()[3], [0, 2, 4, 5])

        IG10 = Graph2.Improved_Graph()
        IG10.add_Node(0)
        IG10.add_Node(1)
        IG10.add_Node(2)
        IG10.add_Node(3)
        IG10.add_Node(4)
        IG10.add_Edge([0, 1])
        IG10.add_Edge([1, 4])
        IG10.add_Edge([0, 4])
        IG10.add_Edge([0, 2])
        IG10.add_Edge([0, 3])
        IG10.add_Edge([2, 3])
        IG10.add_Edge([3, 4])
        self.assertEqual(IG10.get_Vertex_Cover()[1], [0, 2])
        self.assertEqual(IG10.get_Vertex_Cover()[2], [0, 3])
        self.assertEqual(IG10.get_Vertex_Cover()[3], [0, 4])

    def test_get_Minimum_Vertex_Cover(self):
        """! Test graph2 programs' getting-minimum-vertex-cover methods"""
        IG1 = Graph2.Improved_Graph()
        IG1.add_Node("A")
        IG1.add_Node("B")
        IG1.add_Node("C")
        IG1.add_Node("D")
        IG1.add_Edge(["A", "C"])
        IG1.add_Edge(["B", "C"])
        IG1.add_Edge(["C", "D"])
        self.assertEqual(IG1.get_Minimum_Vertex_Cover()[0], ["A", "C"])
        self.assertEqual(IG1.get_Minimum_Vertex_Cover()[1], ["B", "C"])
        self.assertEqual(IG1.get_Minimum_Vertex_Cover()[2], ["C", "D"])

        IG2 = Graph2.Improved_Graph()
        IG2.add_Node("A")
        IG2.add_Node("B")
        IG2.add_Node("C")
        IG2.add_Node("D")
        IG2.add_Node("E")
        IG2.add_Edge(["A", "B"])
        IG2.add_Edge(["A", "D"])
        IG2.add_Edge(["D", "C"])
        IG2.add_Edge(["D", "E"])
        IG2.add_Edge(["C", "E"])
        self.assertEqual(IG2.get_Minimum_Vertex_Cover()[0], ["A", "D"])

        IG3 = Graph2.Improved_Graph()
        IG3.add_Node("A")
        IG3.add_Node("B")
        IG3.add_Node("C")
        IG3.add_Node("D")
        IG3.add_Node("E")
        IG3.add_Edge(["A", "B"])
        IG3.add_Edge(["B", "C"])
        IG3.add_Edge(["C", "D"])
        IG3.add_Edge(["D", "E"])
        self.assertEqual(IG3.get_Minimum_Vertex_Cover()[0], ["B", "C", "D"])

        IG4 = Graph2.Improved_Graph()
        IG4.add_Node(0)
        IG4.add_Node(1)
        IG4.add_Node(2)
        IG4.add_Node(3)
        IG4.add_Node(4)
        IG4.add_Edge([0, 2])
        IG4.add_Edge([1, 2])
        IG4.add_Edge([2, 4])
        IG4.add_Edge([3, 4])
        self.assertEqual(IG4.get_Minimum_Vertex_Cover()[0], [2, 4])

        IG5 = Graph2.Improved_Graph()
        IG5.add_Node(0)
        IG5.add_Node(1)
        IG5.add_Node(2)
        IG5.add_Node(3)
        IG5.add_Node(4)
        IG5.add_Edge([2, 0])
        IG5.add_Edge([2, 1])
        IG5.add_Edge([0, 1])
        IG5.add_Edge([1, 3])
        IG5.add_Edge([1, 4])
        IG5.add_Edge([4, 3])
        self.assertEqual(IG5.get_Minimum_Vertex_Cover()[0], [0, 1])

    def test_get_Range_Vertex_Cover(self):
        """! Test graph2 programs' getting-filtered-vertex-cover methods"""
        IG6 = Graph2.Improved_Graph()
        IG6.add_Node(0)
        IG6.add_Node(1)
        IG6.add_Node(2)
        IG6.add_Node(3)
        IG6.add_Node(4)
        IG6.add_Edge([0, 1])
        IG6.add_Edge([1, 2])
        IG6.add_Edge([2, 3])
        IG6.add_Edge([3, 4])
        IG6.add_Edge([4, 0])
        self.assertEqual(IG6.get_Range_Vertex_Cover(3)[0], [0, 1, 2])
        self.assertEqual(IG6.get_Range_Vertex_Cover(3)[1], [0, 1, 4])

        IG7 = Graph2.Improved_Graph()
        IG7.add_Node(0)
        IG7.add_Node(1)
        IG7.add_Node(2)
        IG7.add_Node(3)
        IG7.add_Node(4)
        IG7.add_Edge([0, 1])
        IG7.add_Edge([0, 2])
        IG7.add_Edge([2, 3])
        IG7.add_Edge([3, 4])
        IG7.add_Edge([1, 4])
        self.assertEqual(IG7.get_Range_Vertex_Cover(3)[0], [0, 1, 2])
        self.assertEqual(IG7.get_Range_Vertex_Cover(3)[1], [0, 1, 4])

        IG8 = Graph2.Improved_Graph()
        IG8.add_Node(0)
        IG8.add_Node(1)
        IG8.add_Node(2)
        IG8.add_Edge([0, 1])
        IG8.add_Edge([1, 2])
        IG8.add_Edge([2, 0])
        self.assertEqual(IG8.get_Range_Vertex_Cover(3)[0], [0, 1])
        self.assertEqual(IG8.get_Range_Vertex_Cover(3)[1], [0, 2])

        IG9 = Graph2.Improved_Graph()
        IG9.add_Node(0)
        IG9.add_Node(1)
        IG9.add_Node(2)
        IG9.add_Node(3)
        IG9.add_Node(4)
        IG9.add_Node(5)
        IG9.add_Edge([0, 1])
        IG9.add_Edge([0, 2])
        IG9.add_Edge([2, 3])
        IG9.add_Edge([2, 4])
        IG9.add_Edge([4, 5])
        self.assertEqual(IG9.get_Range_Vertex_Cover(3)[0], [0, 2, 4])

        IG10 = Graph2.Improved_Graph()
        IG10.add_Node(0)
        IG10.add_Node(1)
        IG10.add_Node(2)
        IG10.add_Node(3)
        IG10.add_Node(4)
        IG10.add_Edge([0, 1])
        IG10.add_Edge([1, 4])
        IG10.add_Edge([0, 4])
        IG10.add_Edge([0, 2])
        IG10.add_Edge([0, 3])
        IG10.add_Edge([2, 3])
        IG10.add_Edge([3, 4])
        self.assertEqual(IG10.get_Range_Vertex_Cover(3)[0], [0, 1])
        self.assertEqual(IG10.get_Range_Vertex_Cover(3)[1], [0, 2])
        self.assertEqual(IG10.get_Range_Vertex_Cover(3)[2], [0, 3])
        self.assertEqual(IG10.get_Range_Vertex_Cover(3)[3], [0, 4])