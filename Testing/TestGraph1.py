# Author: Jingze Dai
# Date: 16/02/2021
# Email Address: daij24@mcmaster.ca or david1147062956@163.com
import unittest
import Graph1


class MyTestCase(unittest.TestCase):
    def test_add_Node(self):
        """! Test graph1 programs' adding node methods"""
        G1 = Graph1.Graph(5)
        G1.add_Node("1")
        G1.add_Node("2")
        G1.add_Node("3")
        G1.add_Node("4")
        G1.add_Node("5")
        G1.add_Edge(["1", "2"])
        G1.add_Edge(["1", "3"])
        G1.add_Edge(["3", "5"])
        G1.add_Edge(["2", "4"])
        G1.add_Edge(["3", "4"])
        self.assertEqual(G1.get_Node(), ["1", "2", "3", "4", "5"])

        G2 = Graph1.Graph(5)
        G2.add_Node("0")
        G2.add_Node("1")
        G2.add_Node("2")
        G2.add_Node("3")
        G2.add_Node("4")
        G2.add_Edge(["0", "1"])
        G2.add_Edge(["0", "2"])
        G2.add_Edge(["0", "3"])
        G2.add_Edge(["0", "4"])
        G2.add_Edge(["1", "2"])
        G2.add_Edge(["2", "4"])
        G2.add_Edge(["4", "3"])
        G2.add_Edge(["3", "1"])
        self.assertEqual(G2.get_Node(), ["0", "1", "2", "3", "4"])

        G3 = Graph1.Graph(5)
        G3.add_Node("0")
        G3.add_Node("1")
        G3.add_Node("2")
        G3.add_Node("3")
        G3.add_Node("4")
        G3.add_Edge(["0", "2"])
        G3.add_Edge(["2", "4"])
        G3.add_Edge(["1", "4"])
        G3.add_Edge(["3", "4"])
        self.assertEqual(G3.get_Node(), ["0", "1", "2", "3", "4"])

        G4 = Graph1.Graph(5)
        G4.add_Node("0")
        G4.add_Node("1")
        G4.add_Node("2")
        G4.add_Node("3")
        G4.add_Node("4")
        G4.add_Edge(["0", "1"])
        G4.add_Edge(["1", "2"])
        G4.add_Edge(["2", "3"])
        G4.add_Edge(["3", "4"])
        self.assertEqual(G4.get_Node(), ["0", "1", "2", "3", "4"])

        G5 = Graph1.Graph(7)
        G5.add_Node("0")
        G5.add_Node("1")
        G5.add_Node("2")
        G5.add_Node("3")
        G5.add_Node("4")
        G5.add_Node("5")
        G5.add_Node("6")
        G5.add_Edge(["0", "1"])
        G5.add_Edge(["0", "6"])
        G5.add_Edge(["6", "1"])
        G5.add_Edge(["0", "2"])
        G5.add_Edge(["2", "3"])
        G5.add_Edge(["3", "1"])
        G5.add_Edge(["2", "4"])
        G5.add_Edge(["4", "5"])
        G5.add_Edge(["5", "3"])
        self.assertEqual(G5.get_Node(), ["0", "1", "2", "3", "4", "5", "6"])

    def test_add_Edge(self):
        """! Test graph1 programs' adding edge methods"""
        G6 = Graph1.Graph(6)
        G6.add_Node("0")
        G6.add_Node("1")
        G6.add_Node("2")
        G6.add_Node("3")
        G6.add_Node("4")
        G6.add_Node("5")
        G6.add_Edge(["0", "1"])
        G6.add_Edge(["1", "2"])
        G6.add_Edge(["0", "4"])
        G6.add_Edge(["4", "3"])
        G6.add_Edge(["0", "3"])
        G6.add_Edge(["3", "2"])
        G6.add_Edge(["2", "5"])
        G6.add_Edge(["3", "5"])
        self.assertEqual(G6.get_Edge()[0], ["0", "1"])
        self.assertEqual(G6.get_Edge()[1], ["1", "2"])
        self.assertEqual(G6.get_Edge()[2], ["0", "4"])
        self.assertEqual(G6.get_Edge()[3], ["4", "3"])
        self.assertEqual(G6.get_Edge()[-1], ["3", "5"])

        G7 = Graph1.Graph(6)
        G7.add_Node("0")
        G7.add_Node("1")
        G7.add_Node("2")
        G7.add_Node("3")
        G7.add_Node("4")
        G7.add_Node("5")
        G7.add_Node("6")
        G7.add_Node("7")
        G7.add_Edge(["0", "1"])
        G7.add_Edge(["1", "2"])
        G7.add_Edge(["4", "2"])
        G7.add_Edge(["0", "3"])
        G7.add_Edge(["3", "4"])
        G7.add_Edge(["5", "3"])
        G7.add_Edge(["5", "6"])
        G7.add_Edge(["6", "7"])
        G7.add_Edge(["7", "4"])
        self.assertEqual(G7.get_Edge()[0], ["0", "1"])
        self.assertEqual(G7.get_Edge()[1], ["1", "2"])
        self.assertEqual(G7.get_Edge()[2], ["4", "2"])
        self.assertEqual(G7.get_Edge()[3], ["0", "3"])
        self.assertEqual(G7.get_Edge()[-1], ["7", "4"])

        G8 = Graph1.Graph(4)
        G8.add_Node("0")
        G8.add_Node("1")
        G8.add_Node("2")
        G8.add_Node("3")
        G8.add_Edge(["0", "1"])
        G8.add_Edge(["0", "2"])
        G8.add_Edge(["0", "3"])
        G8.add_Edge(["2", "3"])
        G8.add_Edge(["2", "1"])
        self.assertEqual(G8.get_Edge()[0], ["0", "1"])
        self.assertEqual(G8.get_Edge()[1], ["0", "2"])
        self.assertEqual(G8.get_Edge()[2], ["0", "3"])
        self.assertEqual(G8.get_Edge()[3], ["2", "3"])
        self.assertEqual(G8.get_Edge()[-1], ["2", "1"])

        G9 = Graph1.Graph(6)
        G9.add_Node("0")
        G9.add_Node("1")
        G9.add_Node("2")
        G9.add_Node("3")
        G9.add_Node("4")
        G9.add_Node("5")
        G9.add_Edge(["0", "2"])
        G9.add_Edge(["2", "4"])
        G9.add_Edge(["0", "1"])
        G9.add_Edge(["2", "3"])
        G9.add_Edge(["4", "5"])
        self.assertEqual(G9.get_Edge()[0], ["0", "2"])
        self.assertEqual(G9.get_Edge()[1], ["2", "4"])
        self.assertEqual(G9.get_Edge()[2], ["0", "1"])
        self.assertEqual(G9.get_Edge()[3], ["2", "3"])
        self.assertEqual(G9.get_Edge()[-1], ["4", "5"])

        G10 = Graph1.Graph(6)
        G10.add_Node("0")
        G10.add_Node("1")
        G10.add_Node("2")
        G10.add_Node("3")
        G10.add_Node("4")
        G10.add_Node("5")
        G10.add_Node("6")
        G10.add_Edge(["0", "1"])
        G10.add_Edge(["0", "2"])
        G10.add_Edge(["1", "3"])
        G10.add_Edge(["3", "4"])
        G10.add_Edge(["5", "4"])
        G10.add_Edge(["4", "6"])
        self.assertEqual(G10.get_Edge()[0], ["0", "1"])
        self.assertEqual(G10.get_Edge()[1], ["0", "2"])
        self.assertEqual(G10.get_Edge()[2], ["1", "3"])
        self.assertEqual(G10.get_Edge()[3], ["3", "4"])
        self.assertEqual(G10.get_Edge()[-1], ["4", "6"])

    def test_eq(self):
        """! Test graph1 programs' eq methods"""
        G6 = Graph1.Graph(6)
        G6.add_Node("0")
        G6.add_Node("1")
        G6.add_Node("2")
        G6.add_Node("3")
        G6.add_Node("4")
        G6.add_Node("5")
        G6.add_Edge(["0", "1"])
        G6.add_Edge(["1", "2"])
        G6.add_Edge(["0", "4"])
        G6.add_Edge(["4", "3"])
        G6.add_Edge(["0", "3"])
        G6.add_Edge(["3", "2"])
        G6.add_Edge(["2", "5"])
        G6.add_Edge(["3", "5"])

        G7 = Graph1.Graph(6)
        G7.add_Node("0")
        G7.add_Node("1")
        G7.add_Node("2")
        G7.add_Node("3")
        G7.add_Node("4")
        G7.add_Node("5")
        G7.add_Edge(["0", "1"])
        G7.add_Edge(["1", "2"])
        G7.add_Edge(["0", "4"])
        G7.add_Edge(["4", "3"])
        G7.add_Edge(["0", "3"])
        G7.add_Edge(["3", "2"])
        G7.add_Edge(["2", "5"])
        G7.add_Edge(["3", "5"])
        self.assertEqual(True, G6 == G7)

    def test_get_Sublist(self):
        """! Test graph1 programs' getting-sublist methods"""
        G1 = Graph1.Graph(5)
        G1.add_Node("1")
        G1.add_Node("2")
        G1.add_Node("3")
        G1.add_Node("4")
        G1.add_Node("5")
        G1.add_Edge(["1", "2"])
        G1.add_Edge(["1", "3"])
        G1.add_Edge(["3", "5"])
        G1.add_Edge(["2", "4"])
        G1.add_Edge(["3", "4"])
        self.assertEqual(G1.get_Sublist()[0], ["1"])
        self.assertEqual(G1.get_Sublist()[1], ["2"])
        self.assertEqual(G1.get_Sublist()[2], ["3"])
        self.assertEqual(G1.get_Sublist()[3], ["4"])
        self.assertEqual(G1.get_Sublist()[4], ["5"])

        G2 = Graph1.Graph(5)
        G2.add_Node("0")
        G2.add_Node("1")
        G2.add_Node("2")
        G2.add_Node("3")
        G2.add_Node("4")
        G2.add_Edge(["0", "1"])
        G2.add_Edge(["0", "2"])
        G2.add_Edge(["0", "3"])
        G2.add_Edge(["0", "4"])
        G2.add_Edge(["1", "2"])
        G2.add_Edge(["2", "4"])
        G2.add_Edge(["4", "3"])
        G2.add_Edge(["3", "1"])
        self.assertEqual(G2.get_Sublist()[0], ["0"])
        self.assertEqual(G2.get_Sublist()[1], ["1"])
        self.assertEqual(G2.get_Sublist()[2], ["2"])
        self.assertEqual(G2.get_Sublist()[3], ["3"])
        self.assertEqual(G2.get_Sublist()[4], ["4"])

        G3 = Graph1.Graph(5)
        G3.add_Node("0")
        G3.add_Node("1")
        G3.add_Node("2")
        G3.add_Node("3")
        G3.add_Node("4")
        G3.add_Edge(["0", "2"])
        G3.add_Edge(["2", "4"])
        G3.add_Edge(["1", "4"])
        G3.add_Edge(["3", "4"])
        self.assertEqual(G3.get_Sublist()[0], ["0"])
        self.assertEqual(G3.get_Sublist()[1], ["1"])
        self.assertEqual(G3.get_Sublist()[2], ["2"])
        self.assertEqual(G3.get_Sublist()[3], ["3"])
        self.assertEqual(G3.get_Sublist()[4], ["4"])

        G4 = Graph1.Graph(5)
        G4.add_Node("0")
        G4.add_Node("1")
        G4.add_Node("2")
        G4.add_Node("3")
        G4.add_Node("4")
        G4.add_Edge(["0", "1"])
        G4.add_Edge(["1", "2"])
        G4.add_Edge(["2", "3"])
        G4.add_Edge(["3", "4"])
        self.assertEqual(G4.get_Sublist()[0], ["0"])
        self.assertEqual(G4.get_Sublist()[1], ["1"])
        self.assertEqual(G4.get_Sublist()[2], ["2"])
        self.assertEqual(G4.get_Sublist()[3], ["3"])
        self.assertEqual(G4.get_Sublist()[4], ["4"])

        G5 = Graph1.Graph(7)
        G5.add_Node("0")
        G5.add_Node("1")
        G5.add_Node("2")
        G5.add_Node("3")
        G5.add_Node("4")
        G5.add_Node("5")
        G5.add_Node("6")
        G5.add_Edge(["0", "1"])
        G5.add_Edge(["0", "6"])
        G5.add_Edge(["6", "1"])
        G5.add_Edge(["0", "2"])
        G5.add_Edge(["2", "3"])
        G5.add_Edge(["3", "1"])
        G5.add_Edge(["2", "4"])
        G5.add_Edge(["4", "5"])
        G5.add_Edge(["5", "3"])
        self.assertEqual(G5.get_Sublist()[0], ["0"])
        self.assertEqual(G5.get_Sublist()[1], ["1"])
        self.assertEqual(G5.get_Sublist()[2], ["2"])
        self.assertEqual(G5.get_Sublist()[3], ["3"])
        self.assertEqual(G5.get_Sublist()[4], ["4"])
        self.assertEqual(G5.get_Sublist()[5], ["5"])
        self.assertEqual(G5.get_Sublist()[6], ["6"])

    def test_get_Vertex_Cover(self):
        """! Test graph1 programs' getting-vertex-cover methods"""
        G6 = Graph1.Graph(6)
        G6.add_Node("0")
        G6.add_Node("1")
        G6.add_Node("2")
        G6.add_Node("3")
        G6.add_Node("4")
        G6.add_Node("5")
        G6.add_Edge(["0", "1"])
        G6.add_Edge(["1", "2"])
        G6.add_Edge(["0", "4"])
        G6.add_Edge(["4", "3"])
        G6.add_Edge(["0", "3"])
        G6.add_Edge(["3", "2"])
        G6.add_Edge(["2", "5"])
        G6.add_Edge(["3", "5"])
        self.assertEqual(G6.get_Vertex_Cover()[0], ["0", "2", "3"])
        self.assertEqual(G6.get_Vertex_Cover()[1], ["0", "1", "2", "3"])
        self.assertEqual(G6.get_Vertex_Cover()[2], ["0", "1", "3", "5"])

        G7 = Graph1.Graph(8)
        G7.add_Node("0")
        G7.add_Node("1")
        G7.add_Node("2")
        G7.add_Node("3")
        G7.add_Node("4")
        G7.add_Node("5")
        G7.add_Node("6")
        G7.add_Node("7")
        G7.add_Edge(["0", "1"])
        G7.add_Edge(["1", "2"])
        G7.add_Edge(["4", "2"])
        G7.add_Edge(["0", "3"])
        G7.add_Edge(["3", "4"])
        G7.add_Edge(["5", "3"])
        G7.add_Edge(["5", "6"])
        G7.add_Edge(["6", "7"])
        G7.add_Edge(["7", "4"])
        self.assertEqual(G7.get_Vertex_Cover()[0], ["1", "3", "4", "6"])
        self.assertEqual(G7.get_Vertex_Cover()[1], ["0", "1", "3", "4", "6"])
        self.assertEqual(G7.get_Vertex_Cover()[2], ["0", "1", "4", "5", "6"])

        G8 = Graph1.Graph(4)
        G8.add_Node("0")
        G8.add_Node("1")
        G8.add_Node("2")
        G8.add_Node("3")
        G8.add_Edge(["0", "1"])
        G8.add_Edge(["0", "2"])
        G8.add_Edge(["0", "3"])
        G8.add_Edge(["2", "3"])
        G8.add_Edge(["2", "1"])
        self.assertEqual(G8.get_Vertex_Cover()[0], ["0", "2"])
        self.assertEqual(G8.get_Vertex_Cover()[1], ["0", "1", "2"])
        self.assertEqual(G8.get_Vertex_Cover()[2], ["0", "1", "3"])

        G9 = Graph1.Graph(6)
        G9.add_Node("0")
        G9.add_Node("1")
        G9.add_Node("2")
        G9.add_Node("3")
        G9.add_Node("4")
        G9.add_Node("5")
        G9.add_Edge(["0", "2"])
        G9.add_Edge(["2", "4"])
        G9.add_Edge(["0", "1"])
        G9.add_Edge(["2", "3"])
        G9.add_Edge(["4", "5"])
        self.assertEqual(G9.get_Vertex_Cover()[0], ["0", "2", "4"])
        self.assertEqual(G9.get_Vertex_Cover()[1], ["0", "2", "5"])
        self.assertEqual(G9.get_Vertex_Cover()[2], ["0", "3", "4"])

        G10 = Graph1.Graph(7)
        G10.add_Node("0")
        G10.add_Node("1")
        G10.add_Node("2")
        G10.add_Node("3")
        G10.add_Node("4")
        G10.add_Node("5")
        G10.add_Node("6")
        G10.add_Edge(["0", "1"])
        G10.add_Edge(["0", "2"])
        G10.add_Edge(["1", "3"])
        G10.add_Edge(["3", "4"])
        G10.add_Edge(["5", "4"])
        G10.add_Edge(["4", "6"])
        self.assertEqual(G10.get_Vertex_Cover()[0], ["0", "1", "4"])
        self.assertEqual(G10.get_Vertex_Cover()[1], ["0", "3", "4"])
        self.assertEqual(G10.get_Vertex_Cover()[2], ["1", "2", "4"])

    def test_get_Minimum_Vertex_Cover(self):
        """! Test graph1 programs' getting-minimum-vertex-cover methods"""
        G1 = Graph1.Graph(5)
        G1.add_Node("1")
        G1.add_Node("2")
        G1.add_Node("3")
        G1.add_Node("4")
        G1.add_Node("5")
        G1.add_Edge(["1", "2"])
        G1.add_Edge(["1", "3"])
        G1.add_Edge(["3", "5"])
        G1.add_Edge(["2", "4"])
        G1.add_Edge(["3", "4"])
        self.assertEqual(G1.get_Minimum_Vertex_Cover()[0], ["2", "3"])

        G2 = Graph1.Graph(5)
        G2.add_Node("0")
        G2.add_Node("1")
        G2.add_Node("2")
        G2.add_Node("3")
        G2.add_Node("4")
        G2.add_Edge(["0", "1"])
        G2.add_Edge(["0", "2"])
        G2.add_Edge(["0", "3"])
        G2.add_Edge(["0", "4"])
        G2.add_Edge(["1", "2"])
        G2.add_Edge(["2", "4"])
        G2.add_Edge(["4", "3"])
        G2.add_Edge(["3", "1"])
        self.assertEqual(G2.get_Minimum_Vertex_Cover()[0], ["0", "1", "4"])
        self.assertEqual(G2.get_Minimum_Vertex_Cover()[1], ["0", "2", "3"])

        G3 = Graph1.Graph(5)
        G3.add_Node("0")
        G3.add_Node("1")
        G3.add_Node("2")
        G3.add_Node("3")
        G3.add_Node("4")
        G3.add_Edge(["0", "2"])
        G3.add_Edge(["2", "4"])
        G3.add_Edge(["1", "4"])
        G3.add_Edge(["3", "4"])
        self.assertEqual(G3.get_Minimum_Vertex_Cover()[0], ["0", "4"])
        self.assertEqual(G3.get_Minimum_Vertex_Cover()[1], ["2", "4"])

        G4 = Graph1.Graph(5)
        G4.add_Node("0")
        G4.add_Node("1")
        G4.add_Node("2")
        G4.add_Node("3")
        G4.add_Node("4")
        G4.add_Edge(["0", "1"])
        G4.add_Edge(["1", "2"])
        G4.add_Edge(["2", "3"])
        G4.add_Edge(["3", "4"])
        self.assertEqual(G4.get_Minimum_Vertex_Cover()[0], ["1", "3"])

        G5 = Graph1.Graph(7)
        G5.add_Node("0")
        G5.add_Node("1")
        G5.add_Node("2")
        G5.add_Node("3")
        G5.add_Node("4")
        G5.add_Node("5")
        G5.add_Node("6")
        G5.add_Edge(["0", "1"])
        G5.add_Edge(["0", "6"])
        G5.add_Edge(["6", "1"])
        G5.add_Edge(["0", "2"])
        G5.add_Edge(["2", "3"])
        G5.add_Edge(["3", "1"])
        G5.add_Edge(["2", "4"])
        G5.add_Edge(["4", "5"])
        G5.add_Edge(["5", "3"])
        self.assertEqual(G5.get_Minimum_Vertex_Cover()[0], ["0", "1", "2", "5"])

    def test_get_Range_Vertex_Cover(self):
        """! Test graph1 programs' getting-filtered-vertex-cover methods"""
        G6 = Graph1.Graph(6)
        G6.add_Node("0")
        G6.add_Node("1")
        G6.add_Node("2")
        G6.add_Node("3")
        G6.add_Node("4")
        G6.add_Node("5")
        G6.add_Edge(["0", "1"])
        G6.add_Edge(["1", "2"])
        G6.add_Edge(["0", "4"])
        G6.add_Edge(["4", "3"])
        G6.add_Edge(["0", "3"])
        G6.add_Edge(["3", "2"])
        G6.add_Edge(["2", "5"])
        G6.add_Edge(["3", "5"])
        self.assertEqual(G6.get_Range_Vertex_Cover(3)[0], ["0", "2", "3"])

        G7 = Graph1.Graph(8)
        G7.add_Node("0")
        G7.add_Node("1")
        G7.add_Node("2")
        G7.add_Node("3")
        G7.add_Node("4")
        G7.add_Node("5")
        G7.add_Node("6")
        G7.add_Node("7")
        G7.add_Edge(["0", "1"])
        G7.add_Edge(["1", "2"])
        G7.add_Edge(["4", "2"])
        G7.add_Edge(["0", "3"])
        G7.add_Edge(["3", "4"])
        G7.add_Edge(["5", "3"])
        G7.add_Edge(["5", "6"])
        G7.add_Edge(["6", "7"])
        G7.add_Edge(["7", "4"])
        self.assertEqual(G7.get_Range_Vertex_Cover(3), [])

        G8 = Graph1.Graph(4)
        G8.add_Node("0")
        G8.add_Node("1")
        G8.add_Node("2")
        G8.add_Node("3")
        G8.add_Edge(["0", "1"])
        G8.add_Edge(["0", "2"])
        G8.add_Edge(["0", "3"])
        G8.add_Edge(["2", "3"])
        G8.add_Edge(["2", "1"])
        self.assertEqual(G8.get_Range_Vertex_Cover(3)[0], ["0", "2"])

        G9 = Graph1.Graph(6)
        G9.add_Node("0")
        G9.add_Node("1")
        G9.add_Node("2")
        G9.add_Node("3")
        G9.add_Node("4")
        G9.add_Node("5")
        G9.add_Edge(["0", "2"])
        G9.add_Edge(["2", "4"])
        G9.add_Edge(["0", "1"])
        G9.add_Edge(["2", "3"])
        G9.add_Edge(["4", "5"])
        self.assertEqual(G9.get_Range_Vertex_Cover(3)[0], ["0", "2", "4"])

        G10 = Graph1.Graph(7)
        G10.add_Node("0")
        G10.add_Node("1")
        G10.add_Node("2")
        G10.add_Node("3")
        G10.add_Node("4")
        G10.add_Node("5")
        G10.add_Node("6")
        G10.add_Edge(["0", "1"])
        G10.add_Edge(["0", "2"])
        G10.add_Edge(["1", "3"])
        G10.add_Edge(["3", "4"])
        G10.add_Edge(["5", "4"])
        G10.add_Edge(["4", "6"])
        self.assertEqual(G10.get_Range_Vertex_Cover(3)[0], ["0", "1", "4"])